const crypt = require('/Users/jo/Desktop/Work/JL Capital/AI/Coinglass/dependencies/node_modules/crypto-js');
const zlib = require('/Users/jo/Desktop/Work/JL Capital/AI/Coinglass/dependencies/node_modules/pako');
const fs = require('fs');
const path = require('path');

var Yt = function(t, e) {
    var n = function(t) {
        var e, n = zlib.inflate(new Uint8Array(t.match(/[\da-f]{2}/gi).map((function(t) {
            return parseInt(t, 16)
        }
        )))), r = "", i = 16384;
        for (e = 0; e < n.length / i; e++)
            r += String.fromCharCode.apply(null, n.slice(e * i, (e + 1) * i));
        return r += String.fromCharCode.apply(null, n.slice(e * i)),
        decodeURIComponent(escape(r))
    }(crypt.AES.decrypt(t, crypt.enc.Utf8.parse(e), {
        mode: crypt.mode.ECB,
        padding: crypt.pad.Pkcs7
    }).toString(crypt.enc.Hex));
    return '"' == n.charAt(0) && (n = n.substring(1, n.length)),
    '"' == n.charAt(n.length - 1) && (n = n.substring(0, n.length - 1)),
    n
};

function get_key(user){
    return Yt(user, 'Y29pbmdsYXNzL2Fw')
}

function get_data(data,user){
    n = get_key(user)
    return Yt(data,n)
}

// Define the encrypted data and user outside the try block
const encrypted_data = "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"
const user = 'cD4ebk6mXDNf8tu2oglCQBPJZdj1aRCe6J7aRdxMWfl/UDUoiTOfkPwwxCNuSzik'
//加密的数据,响应头的用户信息
res = get_data(encrypted_data,user)
console.log(res)

try {
    console.log("Starting decryption process...");
    
    // Decrypt the data - use a different variable name for the result
    const decrypted_data = get_data(encrypted_data, user);
    console.log("Decryption successful!");
    
    try {
        // Parse it as JSON to ensure it's valid
        const json_data = JSON.parse(decrypted_data);
        console.log("JSON parsing successful!");
        
        // Save the decrypted data to a file
        const outputPath = path.join(__dirname, 'altszn-data.json');
        fs.writeFileSync(outputPath, JSON.stringify(json_data, null, 2));
        
        console.log(`Successfully saved decrypted data to ${outputPath}`);
        console.log(`File created at: ${outputPath}`);
        
        // Check if the file was created
        if (fs.existsSync(outputPath)) {
            const stats = fs.statSync(outputPath);
            console.log(`File size: ${stats.size} bytes`);
            console.log(`File created at: ${stats.birthtime}`);
        } else {
            console.log(`ERROR: File does not exist after creation attempt`);
        }
    } catch (jsonError) {
        console.error(`Error parsing JSON: ${jsonError.message}`);
        console.log("Decrypted data (first 100 chars):", decrypted_data.substring(0, 100));
        
        // Save the raw decrypted data to a file for inspection
        const rawOutputPath = path.join(__dirname, 'decrypted-raw.txt');
        fs.writeFileSync(rawOutputPath, decrypted_data);
        console.log(`Saved raw decrypted data to ${rawOutputPath} for inspection`);
    }
} catch (error) {
    console.error(`Error during decryption: ${error.message}`);
}